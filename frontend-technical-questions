https://www.interviewbit.com/html-interview-questions

HTML
=====
1. DOCTYPE
2. <meta>
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
3. Importance of semantic HTML
4. data attributes in HTML5
5. <form method=GET/POST>
6. HTML layout structure 
7. datalist tag, details and summary tag
8. imagemap
9. Web Storage
10. HTML 5 APIs : drag & drop , web workers, 
11. manifest file in HTML
12. GeoLocation api - getCurrentPosition() and watchPosition()
13. Web Components
14. Ensure a website is accessible
15. SVG & Canvas
16. ARIA (Accessible Rich Internet Applications) attributes
17. <label> element
18. Content Security Policy (CSP) and why is it important
      default-src 'self' â†’ Allows content only from the same origin



CSS
===
1. display:none vs visibility:hidden
2. Absolute vs relative position (parent:relative,child:absolute)
3. box-sizing:border-box/content-box
4. Pseudo class & pseudo elements
5. box model
6. reset vs normalize CSS
   reset - remove browser-specific styling , normalize - make the default styles consistent across browsers
7. CSS preprocessor (variables, nesting, functions, and mixins , importing)
8. adaptive design and responsive design
9. flexbox
10. What does Accessibility (a11y) mean (Keyboard Accessibility,Text Alternatives,Semantic HTML,Accessible Forms)
11. grid vs flexbox
12. !important
13. translate()
14. CSS Sprites
15. How to fix browser-specific styling issues
   Browser-Specific CSS(--webkit) , Normalize or Reset CSS , Browser DevTools , Polyfills , Conditionalyl Comment a css
16. How to center align a div inside another div
17. calc()
18. What is CSS Specificity - 
   If there are two or more CSS rules that point to the same element, the selector with the highest specificity value will "win"
19. Image Sprite
20. CSS Media Queries
21. link to different stylesheets for different media and different widths of the browser window 
    <link rel="stylesheet" media="print" href="print.css">
    <link rel="stylesheet" media="screen" href="screen.css">
    <link rel="stylesheet" media="screen and (min-width: 480px)" href="example1.css">
    <link rel="stylesheet" media="screen and (min-width: 701px) and (max-width: 900px)" href="example2.css">
22. How do you organize your CSS code for maintainability and scalability?
    like BEM - Block Element Modifier, OOCSS, or SMACSS , css pre processors
23. align-items, align-content, and align-self



Bootstrap
========
1. container vs container-fluid
2. scrollspy
 It's an auto-updating nav component that allows you to grab sections of the page based on where you're scrolling. Based on the scroll position, the .active class will update from one nav item to the next.
3. properties of flexbox
4. What are the important rules that you should follow while using Grids in Bootstrap?
    A row's immediate child must be a Column.
    Rows are just used to contain Columns and are not utilized for anything else.
    Rows should be put within a container.
5. why bootstrap?


Javascript
==========
1. async and defer
2. use strict
3. undefined vs null
4. == vs ===
5. Hoisting
6. var,let,const
7. arrow function
8. closure
9. call,bind,apply
9. prototype
10. memoization
11. Symbol Datatype
12. Event Loop
13. Object.freeze() and seal()
14. function currying
15. Higher Order Function
16. Recursion
17. array flat()
18. Object.create()
19. shallow vs deep copy
20. Rest Parameter
21. spread operator
22. object vs Map
23. generator functions
24. Event Delegation
25. Proxy Object
26. Debouncing and Throttling
27. Intersection Observer API and Infinite Scrolling
28. Promise.all()
29. broadcast-channel-api
30. WeakMap and WeakSet (Objects in a WeakMap or WeakSet do not prevent garbage collection 
      if there are no other references to them)
31. Memory Leaks in JavaScript (Variables declared without var/let/const,
          Objects referencing each other,Closures Holding References, Timers & Event Listeners: Not cleared properly)


Typescript
===========
1. pros and cons of typescript
2. Symbol()
3. abstract classes
4. What is an interface?
5. ways to control member visibility in TypeScript
6. Enums
7. Optional Parameter
8. noImplicitAny is a compiler option that you set in the tsconfig.json file
9. union types
   let value: string | number = "Foo";
10. tuples
11. Javascript vs Typescript
12. Type vs Interface
13. readonly vs const in TypeScript?  (readonly-class variables , const - normal variables)
14. tsconfig.json
15. declaration files (.d.ts)
16. generics in TypeScript 
17. any vs unknown



Angular
=======
1. Property vs interpolation Binding
2. View Encapsulation - emulated,none,shadowdom
3. *ngif vs [hidden]
4. ngFor trackBy
5. <ng-template>
6. <ng-content> content projection
7. @HostBinding @HostListener
8. pipes , custom pipe
9. pure vs impure pipe
10. Lifecycle - ngOnchanges
11. ngDoCheck
12. Change Detection Strategies
13. @ViewChild
14. Dependency Injection ,when to use inject()
15. interceptors
16. RxJS - Forkjoin
17. mergemap() vs switchmap() vs concatmap()
18. subject , behaviourSubject, replaySubject
19. Model Driven Form
20. Route Guard
21. Route Resolvers
22. lazy & pre loading
23. NgRX - state management
25. Localization - app for different locales



React
=====
1. JSX
2. Virtual DOM , Reconciliation, React Fibre
3. props, prop validation
   props.children 
4. props drilling
5. useEffect
6. custom Hook
7. controlled vs uncontrolled form , 
    State management for dynamic fields
8. React.memo()
9. useMemo
10. useCallback
11. PureComponent
12. HigherOrderComponents
13. Synthetic Event
14. Portals : 
    Portals allow to render components outside the main DOM hierarchy, usually for modals, tooltips, or dropdowns.
15. Error Boundary
16. Server Side Rendering
 ReactDOMServer.renderToString(<App />);
17. axios.all()  
    Use AbortController to cancel ongoing API calls
    Interceptors
18. GraphQL
19. Profiler
20. Context API
21. Route Guard
22. Lazy Loading , Suspense






